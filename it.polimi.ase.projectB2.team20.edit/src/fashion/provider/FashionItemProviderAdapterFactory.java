/**
 */
package fashion.provider;

import fashion.util.FashionAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FashionItemProviderAdapterFactory extends FashionAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FashionItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.FashionDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FashionDomainItemProvider fashionDomainItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.FashionDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFashionDomainAdapter() {
		if (fashionDomainItemProvider == null) {
			fashionDomainItemProvider = new FashionDomainItemProvider(this);
		}

		return fashionDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Article} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArticleItemProvider articleItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Article}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArticleAdapter() {
		if (articleItemProvider == null) {
			articleItemProvider = new ArticleItemProvider(this);
		}

		return articleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.TVProgram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TVProgramItemProvider tvProgramItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.TVProgram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTVProgramAdapter() {
		if (tvProgramItemProvider == null) {
			tvProgramItemProvider = new TVProgramItemProvider(this);
		}

		return tvProgramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.FashionStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FashionStyleItemProvider fashionStyleItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.FashionStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFashionStyleAdapter() {
		if (fashionStyleItemProvider == null) {
			fashionStyleItemProvider = new FashionStyleItemProvider(this);
		}

		return fashionStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.SpatioTemporalDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpatioTemporalDescriptorItemProvider spatioTemporalDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.SpatioTemporalDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpatioTemporalDescriptorAdapter() {
		if (spatioTemporalDescriptorItemProvider == null) {
			spatioTemporalDescriptorItemProvider = new SpatioTemporalDescriptorItemProvider(this);
		}

		return spatioTemporalDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.FamousBrand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FamousBrandItemProvider famousBrandItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.FamousBrand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFamousBrandAdapter() {
		if (famousBrandItemProvider == null) {
			famousBrandItemProvider = new FamousBrandItemProvider(this);
		}

		return famousBrandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.EmergingBrand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmergingBrandItemProvider emergingBrandItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.EmergingBrand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmergingBrandAdapter() {
		if (emergingBrandItemProvider == null) {
			emergingBrandItemProvider = new EmergingBrandItemProvider(this);
		}

		return emergingBrandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.LocalBrand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalBrandItemProvider localBrandItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.LocalBrand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalBrandAdapter() {
		if (localBrandItemProvider == null) {
			localBrandItemProvider = new LocalBrandItemProvider(this);
		}

		return localBrandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.AdvertisingCampaign} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdvertisingCampaignItemProvider advertisingCampaignItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.AdvertisingCampaign}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdvertisingCampaignAdapter() {
		if (advertisingCampaignItemProvider == null) {
			advertisingCampaignItemProvider = new AdvertisingCampaignItemProvider(this);
		}

		return advertisingCampaignItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.AdvertisingProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdvertisingProductItemProvider advertisingProductItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.AdvertisingProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdvertisingProductAdapter() {
		if (advertisingProductItemProvider == null) {
			advertisingProductItemProvider = new AdvertisingProductItemProvider(this);
		}

		return advertisingProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.MacroEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MacroEventItemProvider macroEventItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.MacroEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMacroEventAdapter() {
		if (macroEventItemProvider == null) {
			macroEventItemProvider = new MacroEventItemProvider(this);
		}

		return macroEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.SingleBrandEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleBrandEventItemProvider singleBrandEventItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.SingleBrandEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleBrandEventAdapter() {
		if (singleBrandEventItemProvider == null) {
			singleBrandEventItemProvider = new SingleBrandEventItemProvider(this);
		}

		return singleBrandEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.ProductLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductLineItemProvider productLineItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.ProductLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductLineAdapter() {
		if (productLineItemProvider == null) {
			productLineItemProvider = new ProductLineItemProvider(this);
		}

		return productLineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.ProductStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductStyleItemProvider productStyleItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.ProductStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductStyleAdapter() {
		if (productStyleItemProvider == null) {
			productStyleItemProvider = new ProductStyleItemProvider(this);
		}

		return productStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Product} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductItemProvider productItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Product}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductAdapter() {
		if (productItemProvider == null) {
			productItemProvider = new ProductItemProvider(this);
		}

		return productItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Photo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhotoItemProvider photoItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Photo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhotoAdapter() {
		if (photoItemProvider == null) {
			photoItemProvider = new PhotoItemProvider(this);
		}

		return photoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Description} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DescriptionItemProvider descriptionItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Description}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDescriptionAdapter() {
		if (descriptionItemProvider == null) {
			descriptionItemProvider = new DescriptionItemProvider(this);
		}

		return descriptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Comment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommentItemProvider commentItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Comment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommentAdapter() {
		if (commentItemProvider == null) {
			commentItemProvider = new CommentItemProvider(this);
		}

		return commentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Designer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DesignerItemProvider designerItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Designer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDesignerAdapter() {
		if (designerItemProvider == null) {
			designerItemProvider = new DesignerItemProvider(this);
		}

		return designerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Presenter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PresenterItemProvider presenterItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Presenter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPresenterAdapter() {
		if (presenterItemProvider == null) {
			presenterItemProvider = new PresenterItemProvider(this);
		}

		return presenterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Choreographer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoreographerItemProvider choreographerItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Choreographer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoreographerAdapter() {
		if (choreographerItemProvider == null) {
			choreographerItemProvider = new ChoreographerItemProvider(this);
		}

		return choreographerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Photographer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhotographerItemProvider photographerItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Photographer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhotographerAdapter() {
		if (photographerItemProvider == null) {
			photographerItemProvider = new PhotographerItemProvider(this);
		}

		return photographerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Blogger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BloggerItemProvider bloggerItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Blogger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBloggerAdapter() {
		if (bloggerItemProvider == null) {
			bloggerItemProvider = new BloggerItemProvider(this);
		}

		return bloggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Critic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CriticItemProvider criticItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Critic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCriticAdapter() {
		if (criticItemProvider == null) {
			criticItemProvider = new CriticItemProvider(this);
		}

		return criticItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fashion.Influencer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfluencerItemProvider influencerItemProvider;

	/**
	 * This creates an adapter for a {@link fashion.Influencer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfluencerAdapter() {
		if (influencerItemProvider == null) {
			influencerItemProvider = new InfluencerItemProvider(this);
		}

		return influencerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (fashionDomainItemProvider != null) fashionDomainItemProvider.dispose();
		if (articleItemProvider != null) articleItemProvider.dispose();
		if (tvProgramItemProvider != null) tvProgramItemProvider.dispose();
		if (fashionStyleItemProvider != null) fashionStyleItemProvider.dispose();
		if (spatioTemporalDescriptorItemProvider != null) spatioTemporalDescriptorItemProvider.dispose();
		if (famousBrandItemProvider != null) famousBrandItemProvider.dispose();
		if (emergingBrandItemProvider != null) emergingBrandItemProvider.dispose();
		if (localBrandItemProvider != null) localBrandItemProvider.dispose();
		if (advertisingCampaignItemProvider != null) advertisingCampaignItemProvider.dispose();
		if (advertisingProductItemProvider != null) advertisingProductItemProvider.dispose();
		if (macroEventItemProvider != null) macroEventItemProvider.dispose();
		if (singleBrandEventItemProvider != null) singleBrandEventItemProvider.dispose();
		if (productLineItemProvider != null) productLineItemProvider.dispose();
		if (productStyleItemProvider != null) productStyleItemProvider.dispose();
		if (productItemProvider != null) productItemProvider.dispose();
		if (photoItemProvider != null) photoItemProvider.dispose();
		if (descriptionItemProvider != null) descriptionItemProvider.dispose();
		if (commentItemProvider != null) commentItemProvider.dispose();
		if (designerItemProvider != null) designerItemProvider.dispose();
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (presenterItemProvider != null) presenterItemProvider.dispose();
		if (choreographerItemProvider != null) choreographerItemProvider.dispose();
		if (photographerItemProvider != null) photographerItemProvider.dispose();
		if (bloggerItemProvider != null) bloggerItemProvider.dispose();
		if (criticItemProvider != null) criticItemProvider.dispose();
		if (influencerItemProvider != null) influencerItemProvider.dispose();
	}

}
