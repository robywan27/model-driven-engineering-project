import 'fashion.ecore'

package fashion

	
/* Constraint 1: A model and a designer cannot work for two different brands in the same period of time.
	* In our metamodel, both the designers and the models are subclasses of Role, which is associated with
	* Event; its subclass SingleBrandEvent contains one instance of Brand. Thus, we extracted the information
	* of "work" for one brand from the events these designers and models are associated with. Moreover, we
	* interpreted "the same period of time" as events occurring during the same year and same month. 
*/
context Role inv worksForOneBrand:
	self.oclIsTypeOf(Designer) or self.oclIsTypeOf(Model) implies self.events -> 
		forAll(e1, e2| e1 <> e2 and e1.oclAsType(SingleBrandEvent).brand = e2.oclAsType(SingleBrandEvent).brand
			implies e1.year = e2.year and e1.month = e2.month)

	
	
/* Constraint 2: Every macro-event must include at least ten events from three different brands. 
 * We have interpreted the constraint as ten events with exactly three distinct brands.
*/
context MacroEvent inv minimumNumberOfEvents:
	self.singleBrandEvents -> size() >= 10 and 
			self.singleBrandEvents -> iterate(event; distinctBrands: Set(Brand) = Set{}|
												distinctBrands -> including(event.brand)) -> size() = 3
			
		
			
-- Constraint 3: All the event in the same macro-event must happen in the same month and year. --												
context MacroEvent inv eventsOccurringInSameMonth:
	self.singleBrandEvents -> forAll(e1, e2| e1 <> e2 implies e1.year = e2.year and e1.month = e2.month)												


endpackage